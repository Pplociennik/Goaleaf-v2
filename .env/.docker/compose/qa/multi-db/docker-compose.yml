services:

  # Api Gateway

  api-gateway:
    image: "com.goaleaf/glf-api-gateway:${API_GATEWAY_VERSION}"
    container_name: glf-api-gateway
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "8072:8072"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_APPLICATION_NAME: "api-gateway"
      OTEL_SERVICE_NAME: "api-gateway"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      servicediscovery:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  # Service Discovery

  servicediscovery:
    image: "com.goaleaf/glf-servicediscovery:${SERVICE_DISCOVERY_VERSION}"
    container_name: glf-servicediscovery
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readinessState | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_APPLICATION_NAME: "servicediscovery"
      OTEL_SERVICE_NAME: "servicediscovery"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.12.0.jar"

  # Databases

  accountsdb:
    container_name: accountsdb
    hostname: accountsdb
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  communitiesdb:
    container_name: communitiesdb
    hostname: communitiesdb
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: communitiesdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  authdb:
    container_name: authdb
    hostname: authdb
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: authdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  # Config Server

  configserver:
    image: "com.goaleaf/glf-configserver:${CONFIG_SERVER_VERSION}"
    hostname: glf-configserver
    ports:
      - "8071:8071"
    environment:
      SPRING_PROFILES_ACTIVE: "qa"
      SPRING_APPLICATION_NAME: "configserver"
      OTEL_SERVICE_NAME: "configserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.12.0.jar"
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: ${GIT_URI}
      SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME: ${GIT_USERNAME}
      SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD: ${GIT_PASSWORD}
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readinessState | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      - tempo
    extends:
      file: common-config.yml
      service: microservice-base-config

    # Microservices

    # PP-Auth
  auth:
    image: "com.github.pplociennik.auth/pp-auth:${PP_AUTH_VERSION}"
    container_name: "pp-auth"
    ports:
      - "8711:8711"
    environment:
      SPRING_APPLICATION_NAME: "auth"
      OTEL_SERVICE_NAME: "auth"
      SPRING_DATASOURCE_URL: ${PP_AUTH_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${PP_AUTH_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PP_AUTH_SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_DATABASE_PLATFORM: ${PP_AUTH_SPRING_JPA_DATABASE_PLATFORM}
      SPRING_DATASOURCE_DRIVERCLASSNAME: ${PP_AUTH_SPRING_JPA_DATASOURCE_DRIVERCLASSNAME}
      SPRING_PROFILES_ACTIVE: ${PP_AUTH_SPRING_PROFILES_ACTIVE}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${PP_AUTH_SPRING_JPA_HIBERNATE_DDL_AUTO}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      #      Auth specific:
      PP_AUTH_GLOBAL_CLIENT_URL: ${PP_AUTH_GLOBAL_CLIENT_URL}
      PP_AUTH_GLOBAL_EMAILS_SENDING: ${PP_AUTH_GLOBAL_EMAILS_SENDING}
      PP_AUTH_GLOBAL_JWT_EXPIRATION_TIME: ${PP_AUTH_GLOBAL_JWT_EXPIRATION_TIME}
      PP_AUTH_GLOBAL_JWT_SECRET: ${PP_AUTH_GLOBAL_JWT_SECRET}
      SPRING_JACKSON_DESERIALIZATION_ADJUST_DATES_TO_CONTEXT_TIME_ZONE: ${SPRING_JACKSON_DESERIALIZATION_ADJUST_DATES_TO_CONTEXT_TIME_ZONE}
      SPRING_JACKSON_TIME_ZONE: ${SPRING_JACKSON_TIME_ZONE}
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: ${SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE}
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT}
      SPRING_MAIL_PROTOCOL: ${SPRING_MAIL_PROTOCOL}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRINGDOC_SWAGGER_UI_PATH: ${SPRINGDOC_SWAGGER_UI_PATH}
      PP_AUTH_GLOBAL_ALLOWED_ORIGINS: ${PP_AUTH_GLOBAL_ALLOWED_ORIGINS}
    healthcheck:
      test: "curl --fail --silent localhost:8711/actuator/health/readinessState | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      authdb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

      # Accounts

  accounts:
    image: "com.goaleaf/glf-accounts:${ACCOUNTS_SERVICE_VERSION}"
    container_name: "glf-accounts"
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      OTEL_SERVICE_NAME: "accounts"
      SPRING_DATASOURCE_URL: ${ACCOUNTS_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${ACCOUNTS_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ACCOUNTS_SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_DATABASE_PLATFORM: ${ACCOUNTS_SPRING_JPA_DATABASE_PLATFORM}
      SPRING_DATASOURCE_DRIVERCLASSNAME: ${ACCOUNTS_SPRING_JPA_DATASOURCE_DRIVERCLASSNAME}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${ACCOUNTS_SPRING_JPA_HIBERNATE_DDL_AUTO}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readinessState | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      accountsdb:
        condition: service_healthy
      auth:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

      # Communities

  communities:
    image: "com.goaleaf/glf-communities:${COMMUNITIES_SERVICE_VERSION}"
    container_name: "glf-communities"
    ports:
      - "8090:8090"
    environment:
      SPRING_APPLICATION_NAME: "communities"
      OTEL_SERVICE_NAME: "communities"
      SPRING_DATASOURCE_URL: ${COMMUNITIES_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${COMMUNITIES_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${COMMUNITIES_SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_DATABASE_PLATFORM: ${COMMUNITIES_SPRING_JPA_DATABASE_PLATFORM}
      SPRING_DATASOURCE_DRIVERCLASSNAME: ${COMMUNITIES_SPRING_JPA_DATASOURCE_DRIVERCLASSNAME}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${COMMUNITIES_SPRING_JPA_HIBERNATE_DDL_AUTO}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readinessState | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      communitiesdb:
        condition: service_healthy
      auth:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  # Grafana

  # Loki

  loki:
    image: grafana/loki:latest
    volumes:
      - ../../../observability/loki/local-config.yml:/etc/loki/local-config.yml
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  # Promtail

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../../observability/promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  # Grafana

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ../../../observability/grafana/ds.yaml:/etc/grafana/provisioning/datasources/ds.yaml
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    extends:
      file: common-config.yml
      service: network-deploy-service

  # Prometheus

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ../../../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  # Tempo

  tempo:
    image: grafana/tempo
    container_name: tempo
    ports:
      - "3200:3200"
      - "4318:4318"
    volumes:
      - ../../../observability/tempo/tempo.yaml:/etc/tempo.yaml
    command: -config.file=/etc/tempo.yaml
    extends:
      file: common-config.yml
      service: network-deploy-service

# Networks

networks:
  goaleaf_net:
    driver: "bridge"